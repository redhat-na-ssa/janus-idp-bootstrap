---
# name of instances
name: argocd

# this is for argo type deployments of this chart (set to true)
ignoreHelmHooks: false

# add to this list to deploy team instances to these namespaces
namespaces:
- janus-argocd

# operator manages upgrades
operator: 
  channel: latest
  installPlanApproval: Automatic
  name: openshift-gitops-operator
  sourceName: redhat-operators
  sourceNamespace: openshift-marketplace
  disableDefaultArgoCD: true

# see the TEAM_DOCS.md for more information
teamInstancesAreClusterScoped: true

# adding your secrets for git access or other repository credentials
secrets: []
# EXAMPLE ...
# secrets:
#   - name: git-auth
#     username: 'user'
#     password: 'pass1234'
#     sshPrivateKey: ''

# https://argocd-operator.readthedocs.io/en/latest/reference/argocd/
argocd_cr:
  version: v2.4.11
  applicationSet: {}
  notifications:
    enabled: true
  rbac:
    defaultPolicy: 'role:admin'
    policy: |
      g, system:cluster-admins, role:admin
    scopes: '[groups]'
  resourceExclusions: |
    - apiGroups:
        - tekton.dev
      clusters:
        - '*'
      kinds:
        - TaskRun
        - PipelineRun
  server:
    route:
      enabled: true
      tls:
        termination: reencrypt
        insecureEdgeTerminationPolicy: Redirect
  sso:
    provider: dex
    dex:
      openShiftOAuth: true
  resourceIgnoreDifferences:
    resourceIdentifiers:
    - group: quay.redhat.com
      kind: QuayRegistry
      customization:
        jsonPointers:
        - /spec/components
    - group: route.openshift.io
      kind: Route
      customization:
        jsonPointers:
        - /spec/host
    - group: apps
      kind: Deployment
      customization:
        jsonPointers:
        - /spec/template/spec/containers/0/image
    - group: apps.openshift.io
      kind: DeploymentConfig
      customization:
        jsonPointers:
        - /spec/template/spec/containers/0/image
  resourceHealthChecks:
    - group: argoproj.io
      kind: Application
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            hs.message = obj.status.health.message
          end
        end
        return hs
    - group: image.openshift.io
      kind: ImageStream
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.tags ~= nil then
            numTags = 0
            for _ , item in pairs(obj.status.tags) do
              numTags = numTags + 1
              numItems = 0
              if item.tags ~= nil then
                for _ , item in pairs(item.tags) do
                  numItems = numItems + 1
                end
                if numItems == 0 then
                  return hs
                end
              end
            end
            if numTags > 0 then
              hs.status = "Healthy"
              hs.message = "ImageStream has tags resolved"
              return hs
            end
          end
        end
        return hs
    - group: operators.coreos.com
      kind: Subscription
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.currentCSV ~= nil and (obj.status.state == "AtLatestKnown" or obj.status.state == "UpgradeAvailable" or obj.status.state == "UpgradePending") then
            hs.status = "Healthy"
            hs.message = "Subscription installed"
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Subscription to complete."
        return hs
    - group: ""
      kind: PersistentVolumeClaim
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
            if obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for PVC"
        return hs
    - group: operators.coreos.com
      kind: InstallPlan
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for InstallPlan to complete"
        return hs
    - group: build.openshift.io
      kind: Build
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Build to complete"
        return hs

initialRepositories: []
  #initialRepositories:
  #  - name: redhat-cop
  #    type: helm
  #    url: https://redhat-cop.github.io/helm-charts

  # configure your repo credential template (override this)
repositoryCredentials: []
  # repositoryCredentials:
  #   - name: private-repo-creds
  #     url: https://gitlab-ce.apps.openshift-498-bd8hw.do500.redhatlabs.dev
  #     type: git
  #     password: password
  #     username: username
initialApps: []
  # initialApps:
  #   - name: init-app
  #     path: argocd/
  #     repoURL: https://gitlab-ce.apps.openshift-498-bd8hw.do500.redhatlabs.dev
  #     targetRevision: HEAD